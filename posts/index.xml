<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Bravoooooooo</title><link>https://binary0208.github.io/posts/</link><description>Recent content in Posts on Bravoooooooo</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 16 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://binary0208.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Python装饰器</title><link>https://binary0208.github.io/posts/2022/05/python%E8%A3%85%E9%A5%B0%E5%99%A8/</link><pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate><guid>https://binary0208.github.io/posts/2022/05/python%E8%A3%85%E9%A5%B0%E5%99%A8/</guid><description>&lt;h2 id="装饰器">装饰器&lt;/h2>
&lt;p>一开始接触Python的装饰器，以为他跟Java的注解很像，但实际上他们两个完全不一样，Python的装饰器实际上就是一个函数，参数是函数，返回值也是函数，本质上就是个语法糖。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">timer&lt;/span>(func):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">wrapper&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time_start &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> func()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time_end &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Time cost = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>time_end &lt;span style="color:#f92672">-&lt;/span> time_start&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.3f&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">s&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> wrapper
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@timer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">say_hello&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time&lt;span style="color:#f92672">.&lt;/span>sleep(&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;hello&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>say_hello()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Time cost &lt;span style="color:#f92672">=&lt;/span> 3.000s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上写法等同于以下写法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">timer&lt;/span>(func):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">wrapper&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time_start &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> func()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time_end &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Time cost = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>time_end &lt;span style="color:#f92672">-&lt;/span> time_start&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.3f&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">s&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> wrapper
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">say_hello&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time&lt;span style="color:#f92672">.&lt;/span>sleep(&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;hello&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>timer(say_hello)()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果&lt;/p></description><content type="html"><![CDATA[<h2 id="装饰器">装饰器</h2>
<p>一开始接触Python的装饰器，以为他跟Java的注解很像，但实际上他们两个完全不一样，Python的装饰器实际上就是一个函数，参数是函数，返回值也是函数，本质上就是个语法糖。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">timer</span>(func):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wrapper</span>():
</span></span><span style="display:flex;"><span>        time_start <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>        func()
</span></span><span style="display:flex;"><span>        time_end <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Time cost = </span><span style="color:#e6db74">{</span>time_end <span style="color:#f92672">-</span> time_start<span style="color:#e6db74">:</span><span style="color:#e6db74">.3f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">s&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> wrapper
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@timer</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">say_hello</span>():
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;hello&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>say_hello()
</span></span></code></pre></div><p>运行结果</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>hello
</span></span><span style="display:flex;"><span>Time cost <span style="color:#f92672">=</span> 3.000s
</span></span></code></pre></div><p>以上写法等同于以下写法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">timer</span>(func):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wrapper</span>():
</span></span><span style="display:flex;"><span>        time_start <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>        func()
</span></span><span style="display:flex;"><span>        time_end <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Time cost = </span><span style="color:#e6db74">{</span>time_end <span style="color:#f92672">-</span> time_start<span style="color:#e6db74">:</span><span style="color:#e6db74">.3f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">s&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> wrapper
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">say_hello</span>():
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;hello&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>timer(say_hello)()
</span></span></code></pre></div><p>运行结果</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>hello
</span></span><span style="display:flex;"><span>Time cost <span style="color:#f92672">=</span> 3.000s
</span></span></code></pre></div><h2 id="带参数的装饰器">带参数的装饰器</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">timer</span>(msg):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">outer_wrapper</span>(func):
</span></span><span style="display:flex;"><span>        print(msg)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wrapper</span>():
</span></span><span style="display:flex;"><span>            time_start <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>            func()
</span></span><span style="display:flex;"><span>            time_end <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Time cost = </span><span style="color:#e6db74">{</span>time_end <span style="color:#f92672">-</span> time_start<span style="color:#e6db74">:</span><span style="color:#e6db74">.3f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">s&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> wrapper()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> outer_wrapper
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@timer</span>(msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;计时器开始工作啦&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">say_hello</span>():
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;hello&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>timer(say_hello)
</span></span></code></pre></div><p>运行结果</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>计时器开始工作啦
</span></span><span style="display:flex;"><span>hello
</span></span><span style="display:flex;"><span>Time cost <span style="color:#f92672">=</span> 3.000s
</span></span></code></pre></div><p>以上写法等同于以下写法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">timer</span>(msg):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">outer_wrapper</span>(func):
</span></span><span style="display:flex;"><span>        print(msg)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wrapper</span>():
</span></span><span style="display:flex;"><span>            time_start <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>            func()
</span></span><span style="display:flex;"><span>            time_end <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Time cost = </span><span style="color:#e6db74">{</span>time_end <span style="color:#f92672">-</span> time_start<span style="color:#e6db74">:</span><span style="color:#e6db74">.3f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">s&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> wrapper
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> outer_wrapper
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">say_hello</span>():
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;hello&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>timer(<span style="color:#e6db74">&#39;计时器开始工作啦&#39;</span>)(say_hello)()
</span></span></code></pre></div><p>运行结果</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>计时器开始工作啦
</span></span><span style="display:flex;"><span>hello
</span></span><span style="display:flex;"><span>Time cost <span style="color:#f92672">=</span> 3.000s
</span></span></code></pre></div><p>可以发现装饰器的写法更加的通俗易懂，毕竟是语法糖嘛</p>
]]></content></item><item><title>JavaScript异步编程——ES6的Promise相较于传统callback的优点</title><link>https://binary0208.github.io/posts/2022/03/javascript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8Bes6%E7%9A%84promise%E7%9B%B8%E8%BE%83%E4%BA%8E%E4%BC%A0%E7%BB%9Fcallback%E7%9A%84%E4%BC%98%E7%82%B9/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://binary0208.github.io/posts/2022/03/javascript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8Bes6%E7%9A%84promise%E7%9B%B8%E8%BE%83%E4%BA%8E%E4%BC%A0%E7%BB%9Fcallback%E7%9A%84%E4%BC%98%E7%82%B9/</guid><description>&lt;h2 id="回调地狱">回调地狱&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">setTimeout&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;1号任务&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, &lt;span style="color:#ae81ff">3000&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">setTimeout&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;2号任务&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, &lt;span style="color:#ae81ff">1500&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">setTimeout&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;3号任务&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, &lt;span style="color:#ae81ff">5000&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>2号任务
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1号任务
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3号任务
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现有一需求，要求完成1号任务之后，再完成2号任务，最后在完成3号任务，就得将代码改成下面这样&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">setTimeout&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;1号任务&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setTimeout&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;2号任务&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setTimeout&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;3号任务&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#ae81ff">5000&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#ae81ff">1500&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, &lt;span style="color:#ae81ff">3000&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>1号任务
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2号任务
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3号任务
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到代码有很多层嵌套，如果有很多任务，就得一直嵌套下去，这就是所谓的回调地狱，后期代码维护起来很麻烦&lt;/p></description><content type="html"><![CDATA[<h2 id="回调地狱">回调地狱</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">setTimeout</span>(() =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;1号任务&#39;</span>)
</span></span><span style="display:flex;"><span>}, <span style="color:#ae81ff">3000</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">setTimeout</span>(() =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;2号任务&#39;</span>)
</span></span><span style="display:flex;"><span>}, <span style="color:#ae81ff">1500</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">setTimeout</span>(() =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;3号任务&#39;</span>)
</span></span><span style="display:flex;"><span>}, <span style="color:#ae81ff">5000</span>)
</span></span></code></pre></div><p>运行结果</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>2号任务
</span></span><span style="display:flex;"><span>1号任务
</span></span><span style="display:flex;"><span>3号任务
</span></span></code></pre></div><p>现有一需求，要求完成1号任务之后，再完成2号任务，最后在完成3号任务，就得将代码改成下面这样</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">setTimeout</span>(() =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;1号任务&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">setTimeout</span>(() =&gt; {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;2号任务&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">setTimeout</span>(() =&gt; {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;3号任务&#39;</span>)
</span></span><span style="display:flex;"><span>        }, <span style="color:#ae81ff">5000</span>)
</span></span><span style="display:flex;"><span>    }, <span style="color:#ae81ff">1500</span>)
</span></span><span style="display:flex;"><span>}, <span style="color:#ae81ff">3000</span>)
</span></span></code></pre></div><p>运行结果</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>1号任务
</span></span><span style="display:flex;"><span>2号任务
</span></span><span style="display:flex;"><span>3号任务
</span></span></code></pre></div><p>可以看到代码有很多层嵌套，如果有很多任务，就得一直嵌套下去，这就是所谓的回调地狱，后期代码维护起来很麻烦</p>
<h2 id="链式调用">链式调用</h2>
<p>我们将代码用Promise进行封装</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">p1</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Promise((<span style="color:#a6e22e">resolve</span>, <span style="color:#a6e22e">reject</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">setTimeout</span>(() =&gt; {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">resolve</span>(<span style="color:#e6db74">&#39;1号任务&#39;</span>)
</span></span><span style="display:flex;"><span>    }, <span style="color:#ae81ff">3000</span>)
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">p2</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Promise((<span style="color:#a6e22e">resolve</span>, <span style="color:#a6e22e">reject</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">setTimeout</span>(() =&gt; {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">resolve</span>(<span style="color:#e6db74">&#39;2号任务&#39;</span>)
</span></span><span style="display:flex;"><span>    }, <span style="color:#ae81ff">1500</span>)
</span></span><span style="display:flex;"><span>})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">p3</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Promise((<span style="color:#a6e22e">resolve</span>, <span style="color:#a6e22e">reject</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">setTimeout</span>(() =&gt; {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">resolve</span>(<span style="color:#e6db74">&#39;3号任务&#39;</span>)
</span></span><span style="display:flex;"><span>    }, <span style="color:#ae81ff">5000</span>)
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>之后调用</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">p1</span>.<span style="color:#a6e22e">then</span>((<span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">res</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p2</span>
</span></span><span style="display:flex;"><span>}).<span style="color:#a6e22e">then</span>((<span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">res</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">p3</span>
</span></span><span style="display:flex;"><span>}).<span style="color:#a6e22e">then</span>((<span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">res</span>)
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><p>运行结果</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>1号任务
</span></span><span style="display:flex;"><span>2号任务
</span></span><span style="display:flex;"><span>3号任务
</span></span></code></pre></div><p>可以看到这样的代码，以后任务多了，代码是向下增长的，而非向右，后期更好维护</p>
<h2 id="结合es2017的asyncawait使用">结合ES2017的async，await使用</h2>
<ul>
<li>await实质上就是Promise的一个语法糖</li>
<li>await会返回Promise对象的resolve里传的值</li>
<li>await必须放在async函数里</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">doTask</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">r1</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">p1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">r1</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">r2</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">p2</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">r2</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">r3</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">p3</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">r3</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">doTask</span>()
</span></span></code></pre></div><p>运行结果</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>1号任务
</span></span><span style="display:flex;"><span>2号任务
</span></span><span style="display:flex;"><span>3号任务
</span></span></code></pre></div><p>可以看出这样写出的异步代码十分的优雅，await将异步代码改造成了同步代码</p>
]]></content></item><item><title>我的世界1.18.1Paper服务端开服</title><link>https://binary0208.github.io/posts/2022/02/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C1.18.1paper%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E6%9C%8D/</link><pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate><guid>https://binary0208.github.io/posts/2022/02/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C1.18.1paper%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E6%9C%8D/</guid><description>&lt;h2 id="前置要求">前置要求&lt;/h2>
&lt;ul>
&lt;li>公网IP&lt;/li>
&lt;li>域名&lt;/li>
&lt;li>有DDNS功能的路由器&lt;/li>
&lt;li>Java17&lt;/li>
&lt;/ul>
&lt;h2 id="开服">开服&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>先到路由器进行设置，设置路由器的DDNS解析&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后端口转发25565内外部端口到运行服务器的那台电脑的IP地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>到paper官网下载最新的服务端&lt;a href="https://papermc.io/downloads">下载地址&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>之后cd到文件所在目录，运行以下指令就可以开服了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>java -Xms4G -Xmx4G -jar paper-###.jar --nogui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同意ELUA协议之后，再次运行上面的指令&lt;/p>
&lt;p>如果是盗版服务器，server.properties里的online-mode改为false&lt;/p></description><content type="html"><![CDATA[<h2 id="前置要求">前置要求</h2>
<ul>
<li>公网IP</li>
<li>域名</li>
<li>有DDNS功能的路由器</li>
<li>Java17</li>
</ul>
<h2 id="开服">开服</h2>
<ol>
<li>
<p>先到路由器进行设置，设置路由器的DDNS解析</p>
</li>
<li>
<p>然后端口转发25565内外部端口到运行服务器的那台电脑的IP地址</p>
</li>
<li>
<p>到paper官网下载最新的服务端<a href="https://papermc.io/downloads">下载地址</a></p>
</li>
<li>
<p>之后cd到文件所在目录，运行以下指令就可以开服了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>java -Xms4G -Xmx4G -jar paper-###.jar --nogui
</span></span></code></pre></div><p>同意ELUA协议之后，再次运行上面的指令</p>
<p>如果是盗版服务器，server.properties里的online-mode改为false</p>
</li>
</ol>
<h2 id="服务器插件下载网站">服务器插件下载网站</h2>
<ul>
<li><a href="https://www.mcbbs.net/forum-servermod-1.html">mcbbs</a></li>
<li><a href="https://www.spigotmc.org/resources/categories/spigot.4/">Spigot</a></li>
<li><a href="https://www.curseforge.com/minecraft/bukkit-plugins">Bukkit</a></li>
</ul>
]]></content></item><item><title>记录一下小米AX3600刷机OpenWrt固件</title><link>https://binary0208.github.io/posts/2022/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%B0%8F%E7%B1%B3ax3600%E5%88%B7%E6%9C%BAopenwrt%E5%9B%BA%E4%BB%B6/</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><guid>https://binary0208.github.io/posts/2022/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%B0%8F%E7%B1%B3ax3600%E5%88%B7%E6%9C%BAopenwrt%E5%9B%BA%E4%BB%B6/</guid><description>&lt;p>记录一下自己刷机路由器固件，中途过程比较坎坷。&lt;/p>
&lt;p>本次记录使用的所有工具和文件&lt;a href="https://wwt.lanzoum.com/iCcsK01slxxc">下载地址&lt;/a>&lt;/p>
&lt;h2 id="开启ax3600的ssh">开启AX3600的SSH&lt;/h2>
&lt;ul>
&lt;li>AX3600在固件版本为1.0.17的时候才能够开启SSH，首先得将路由器降级到1.0.17&lt;/li>
&lt;li>复制路由器后台网址中的”STOK=“的后面的数据备用&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>获取SSH权限：&lt;/p>
&lt;pre tabindex="0">&lt;code>http://192.168.31.1/cgi-bin/luci/;stok=将之前保存的stok后面的数据粘贴过来替换/api/misystem/set_config_iotdev?bssid=Xiaomi&amp;amp;user_id=longdike&amp;amp;ssid=-h%3B%20nvram%20set%20ssh_en%3D1%3B%20nvram%20commit%3B%20sed%20-i%20&amp;#39;s%2Fchannel%3D.*%2Fchannel%3D%5C%22debug%5C%22%2Fg&amp;#39;%20%2Fetc%2Finit.d%2Fdropbear%3B%20%2Fetc%2Finit.d%2Fdropbear%20start%3B
&lt;/code>&lt;/pre>&lt;p>复制到浏览器打开，如果显示&lt;code>{&amp;quot;code&amp;quot;:0}&lt;/code>，就说明成功了&lt;/p></description><content type="html"><![CDATA[<p>记录一下自己刷机路由器固件，中途过程比较坎坷。</p>
<p>本次记录使用的所有工具和文件<a href="https://wwt.lanzoum.com/iCcsK01slxxc">下载地址</a></p>
<h2 id="开启ax3600的ssh">开启AX3600的SSH</h2>
<ul>
<li>AX3600在固件版本为1.0.17的时候才能够开启SSH，首先得将路由器降级到1.0.17</li>
<li>复制路由器后台网址中的”STOK=“的后面的数据备用</li>
</ul>
<ol>
<li>
<p>获取SSH权限：</p>
<pre tabindex="0"><code>http://192.168.31.1/cgi-bin/luci/;stok=将之前保存的stok后面的数据粘贴过来替换/api/misystem/set_config_iotdev?bssid=Xiaomi&amp;user_id=longdike&amp;ssid=-h%3B%20nvram%20set%20ssh_en%3D1%3B%20nvram%20commit%3B%20sed%20-i%20&#39;s%2Fchannel%3D.*%2Fchannel%3D%5C%22debug%5C%22%2Fg&#39;%20%2Fetc%2Finit.d%2Fdropbear%3B%20%2Fetc%2Finit.d%2Fdropbear%20start%3B
</code></pre><p>复制到浏览器打开，如果显示<code>{&quot;code&quot;:0}</code>，就说明成功了</p>
</li>
<li>
<p>更改root密码为admin：</p>
<pre tabindex="0"><code>http://192.168.31.1/cgi-bin/luci/;stok=将之前保存的stok后面的数据粘贴过来替换/api/misystem/set_config_iotdev?bssid=Xiaomi&amp;user_id=longdike&amp;ssid=-h%3B%20echo%20-e%20&#39;admin%5Cnadmin&#39;%20%7C%20passwd%20root%3B
</code></pre><p>复制到浏览器打开，如果显示<code>{&quot;code&quot;:0}</code>，就说明成功了</p>
</li>
</ol>
<h2 id="开始刷机">开始刷机</h2>
<ul>
<li>
<p>由于小米路由器系统只有SCP协议，所以需要在MobaXterm里更改文件的传输协议</p>
</li>
<li>
<p>然后使用MobaXterm连接192.168.31.1:22，账号：root，密码：admin</p>
</li>
<li>
<p>cd到/tmp目录下，把openwrt-ipq807x-generic-xiaomi_ax3600-squashfs-nand-factory.ubi这个文件上传到该目录下</p>
</li>
<li>
<p>输入以下指令</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span> nvram set flag_last_success<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span> nvram set flag_boot_rootfs<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span> nvram set flag_boot_success<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span> nvram set flag_try_sys1_failed<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span> nvram set flag_try_sys2_failed<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span> nvram set boot_wait<span style="color:#f92672">=</span>on
</span></span><span style="display:flex;"><span> nvram set uart_en<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span> nvram set telnet_en<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span> nvram set ssh_en<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span> nvram commit
</span></span><span style="display:flex;"><span> ubiformat /dev/mtd13 -y -f /tmp/openwrt-ipq807x-generic-xiaomi_ax3600-squashfs-nand-factory.ubi
</span></span><span style="display:flex;"><span> nvram set flag_last_success<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span> nvram set flag_boot_rootfs<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span> nvram commit
</span></span><span style="display:flex;"><span> reboot
</span></span></code></pre></div><p>由于小米路由器是双分区，以上操作是在另一个分区刷机OpenWrt固件，然后并更改默认启动的分区，原版官方固件处在另一分区，还依然存在，想刷回去的话随时都可以，输入以下指令即可。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>fw_setenv flag_last_success <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>fw_setenv flag_boot_rootfs <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>reboot
</span></span></code></pre></div><p>之后等待一会儿，浏览器打开192.168.10.1就可以登录OpenWrt管理界面了，账号：root，密码：password，ssh账号和密码也是一样的。</p>
</li>
</ul>
]]></content></item></channel></rss>